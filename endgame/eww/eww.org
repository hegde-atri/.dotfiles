#+title: Eww
#+auto_tangle: t

* Windows

#+begin_src yuck :tangle eww.yuck
(defwindow bar0
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "0px"
                               :width "10%"
                               :height "40px"
                               :anchor "top center")
           :stacking "fg"
           :focusable "false"
           :exclusive "false"
  (main_bar))

(defwindow bar1
           :monitor 1
           :geometry (geometry :x "0%"
                               :y "0px"
                               :width "10%"
                               :height "40px"
                               :anchor "top center")
           :stacking "fg"
           :focusable "false"
           :exclusive "false"
  (main_bar))
#+end_src

#+begin_src scss :tangle eww.scss
,* {
  all: unset;
}
.background {
  background: black;
  border-radius: 5px;
}

button {
  padding: 10px;
}
#+end_src

** Main widget

#+begin_src yuck :tangle eww.yuck
(defwidget main_bar []
           (box :class "main_bar"
                (vpn_module)
                (clock_module)
                (battery_module)
                (net_module)
           )
)
#+end_src


* Widgets

** Time

#+begin_src yuck :tangle eww.yuck
(defpoll time :interval "1s"
              :initial "initial-value"
              `date +%H:%M`)

(defwidget clock_module []
           (eventbox :onclick "${EWW_CMD} open --toggle calendar_window"
            (box :space-evenly true :orientation "h"
                 (label :class "clock" :text "${time}")
            )
            )
)

(defwidget calendar_module []
  (box :class "cal" :orientation "vertical"
       (box :class "cal-in"
       (calendar :class "cal-wid")))
)

(defwindow calendar_window
  :monitor 0
  :geometry (geometry :x "0px"
                      :y "40px"
                      :anchor "top center")
  (calendar_module)
)
#+end_src

#+begin_src scss :tangle eww.scss
.clock {
  font-family: "JetBrains Mono";
  font-size: 25px;
}

.cal {
  background-color: black;
  font-family: "JetBrains Mono";
  font-size: 16px;
  font-weight: normal;

.cal-in {
    padding: 0px 10px 0px 10px;
    color: #ababab;

.cal {
     &.highlight {
          padding: 20px;
      }

      padding: 50px;
      margin-left: 10px;
    }
  }
}

calendar:selected {
  color: white;
  background-color: black;
  font-weight: bold;
  text-decoration: underline;
}

calendar.header {
  color: gray;
  font-weight: bold;
}

calendar.button {
  color: gray;
}

calendar.highlight {
  color: gray;
  font-weight: bold;
}

calendar:indeterminate {
  color: #808080;
}
#+end_src

** Battery

#+begin_src yuck :tangle eww.yuck
(defpoll bat_status :interval "3s" "~/.config/eww/scripts/bat_status")
(defwidget battery_module []
           (box :class "bat_mod"
                (circular-progress :valign "center"
                                   :class "bat"
                                   :clockwise true
                                   :start-at 75
                                   :thickness 5
                                   :value "${EWW_BATTERY.BAT0.capacity}"
                                   (button
                                    :class "bat_icon ${bat_status == "Charging" ? "bat_charging" : "bat_charged"}"
                                    :tooltip "battery on ${EWW_BATTERY.BAT0.capacity}%"
                                    bat_status
                                    )
                                   )
                )
           )
#+end_src

#+begin_src scss :tangle eww.scss
.bat {
  color: rgb(152, 195, 121);
  background-color: rgb(15, 80, 60);
}


.bat_icon {
  min-height: 0;
  min-width: 0;
  color:transparent;
  font-size: 12px;
  margin: 2px;
  background-color: black;
}

.bat_charged {
  color: gray;
}
.bat_charging {
  color: yellow;
}
#+end_src

#+begin_src sh :shebang #!/bin/sh :mkdirp true :tangle ./scripts/bat_status
status=$(cat /sys/class/power_supply/BAT0/status)
if [ "$status" = "Charging" ]; then
    echo "󱐋"
elif [ "$status" = "Discharging" ]; then
    echo ""
elif [ "$status" = "Not charging" ]; then
    echo ""
fi
#+end_src

** VPN

#+begin_src yuck :tangle eww.yuck
(defpoll vpn :interval "2s" "~/.config/eww/scripts/vpn label")
(defpoll vpn_tip :interval "2s" "~/.config/eww/scripts/vpn tooltip")
(defwidget vpn_module []
           (box :class "vpn_mod"
                (button
                 :class "vpn_button ${vpn_tip == "Disconnected" ? "vpn_inactive" : "vpn_active"}"
                 :tooltip vpn_tip
                 :onclick `nmcli con up thinkpad`
                 :onrightclick `nmcli con down thinkpad`
                 vpn)
                )
           )
#+end_src

#+begin_src scss :tangle eww.scss
.vpn_mod {
  background-color: transparent;;
}

.vpn_button {
  background-color: transparent;
}

.vpn_button:hover {
  color: gray;
}

.vpn_inactive {
  color: #e5c890;
}

.vpn_active {
  color: #a6e3a1
}
#+end_src

#+begin_src sh :shebang #!/bin/sh :mkdirp true :tangle ./scripts/vpn
if [ "$1" = "label" ]; then
    test -d /proc/sys/net/ipv4/conf/ppp0 && echo "󰖂 UoS" && exit
    test -d /proc/sys/net/ipv4/conf/thinkpad && echo "󰖂 Home" && exit
    echo "  N/A" && exit
elif [ "$1" = tooltip ]; then
    test -d /proc/sys/net/ipv4/conf/ppp0 && echo "󰖂 Connected to UoS" && exit
    test -d /proc/sys/net/ipv4/conf/thinkpad && echo "󰖂 Connected home" && exit
    echo "Disconnected" && exit
fi
#+end_src
** Network

#+begin_src yuck :tangle eww.yuck
(defpoll net_icon :interval "2s" "~/.config/eww/scripts/network")
(defwidget net_module []
           (label
            :class "net_icon"
            :tooltip "Tooltip"
            :text net_icon
            )
           )
#+end_src

#+begin_src scss :tangle eww.scss
.net_icon {
  color: white;
}
#+end_src

#+begin_src sh :shebang #!/bin/sh :mkdirp true :tangle ./scripts/network
connection_type=$(nmcli -t -f TYPE connection show --active >/dev/null)

if echo "$connection_type" rg -q "802-11-wireless">/dev/null; then
    echo "󰈀"
elif echo "$connection_type" rg -q "802-3-ethernet" >/dev/null; then
    echo "󰤨"
else
    echo ""
fi

#+end_src
** Temp

#+begin_src yuck :tangle eww.yuck
#+end_src

#+begin_src scss :tangle eww.scss
#+end_src

#+begin_src sh :shebang #!/bin/sh :mkdirp true :tangle ./scripts/temp
#+end_src
