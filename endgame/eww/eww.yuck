(defwindow secondary
           :monitor 1
           :geometry (geometry :x "0%"
                               :y "0px"
                               :width "100%"
                               :height "30px"
                               :anchor "top center")
           :stacking "fg"
           :exclusive true
           :focusable false
           (main_bar)
)

(defwindow main
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "0px"
                               :width "100%"
                               :height "30px"
                               :anchor "top center")
           :stacking "fg"
           :exclusive true
           :focusable false
           (main_bar)
)


(defwidget main_bar []
  (box :class "main_bar"
       (left)
       (center)
       (right)
  )
)

(defwidget left []
  (box :space-evenly false
       :halign "start"
       :class "left_modules"
  )
)

(defwidget center []
  (box :space-evenly true
       :halign "center"
       :class "center_modules"
       (music)
  )
)

(defwidget right []
  (box :halign "end"
       :space-evenly false
       :class "right_modules"
       (vpn_module)
       (network_module)
       (cpu_module)
       (ram_module)
       (battery_module)
       (clock_module)
  )
)

;; Window title
(deflisten window :initial "..." "dash ~/.config/eww/scripts/hypr/window-title")
(defwidget window_name []
  (box
    (label :limit-width 50 :text window)
  )
)

;; Workspaces
(deflisten workspaces :init "[]" "dash ~/.config/eww/scripts/hypr/get-workspaces")
(deflisten current_workspace :initial "6" "dash ~/.config/eww/scripts/hypr/get-active-workspace")
(defwidget workspaces []
  (box :space-evenly true
       (for workspace in workspaces
            (eventbox :class "workspace entry ${workspace.id == current_workspace ? "active-workspace" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
                 (label :text "${workspace.id}")
            )
       )
  )
)

;; Clock and calender widget
(defvar cal false)
(defpoll time :interval "1s"
              :initial "initial-value"
              `date +%H:%M:%S`)
(defwidget clock_module []
  (eventbox :onhover "${EWW_CMD} update cal=true"
            :onhoverlost "${EWW_CMD} update cal=false"
            (box :space-evenly false :orientation "h"
                 (label :class "clock" :text "${time}")
             )
  )
)

;; Battery widget
(defwidget battery_module []
  (box :class "bat_mod"
    (circular-progress :valign "center"
                       :class "bat"
                       :clockwise true
                       :start-at 75
                       :thickness 4
                       :value "${EWW_BATTERY.BAT0.capacity}"
      (button
        :class "bat_icon"
        :tooltip "battery on ${EWW_BATTERY.BAT0.capacity}%"
        :onclick `notify-send "info-centre"`
        "")
    )
  )
)

;; RAM widget
(defwidget ram_module []
  (box :class "ram_mod"
       (circular-progress  
         :valign "center"
         :class "ram"
         :clockwise true
         :start-at 75
         :thickness 4
         :value "${EWW_RAM.used_mem_perc}"
       (button
         :class "ram_icon"
         :tooltip "${EWW_RAM.used_mem_perc}%"
         :onclick `notify-send "Info centre"`
         ""))))

;; CPU widget
(defpoll cpu_temp :interval "5s" "(expr $(cat /sys/class/hwmon/hwmon3/temp1_input) / 1000)")
(defwidget cpu_module []
  (box :class "cpu_mod"
       (circular-progress
         :valign "center"
         :class "cpu"
         :clockwise true
         :start-at 75
         :thickness 4
         :value "${EWW_CPU.avg}"
         (button
           :class "cpu_icon"
           :tooltip "${cpu_temp}°C"
           :onclick `notify-send "Info centre"`
           ""))))

;; VPN widget
(defpoll vpn :interval "2s" "~/.config/eww/scripts/vpn label")
(defpoll vpn_tip :interval "2s" "~/.config/eww/scripts/vpn tooltip")
(defwidget vpn_module []
  (box :class "vpn_mod"
       (button
         :class "vpn_button ${vpn_tip == "Disconnected" ? "vpn_inactive" : "vpn_active"}"
         :tooltip vpn_tip
         :onclick `nmcli con up thinkpad`
         :onrightclick `nmcli con down thinkpad`
         vpn)))

;; Network
(defvar network_reveal false)
(defvar network_centre false)
(defwidget network_module []
  (box :class "network_module"
       (button
         :class "network_button"
         :tooltip "tooltip"
         :onclick "${EWW_CMD} update network_reveal true"
         "network")
  )
)

;; MPD widget
(defvar music_reveal false)
(defpoll song :interval "2s"  "~/.config/eww/scripts/music_info --song")
(defpoll song_artist :interval "2s"  "~/.config/eww/scripts/music_info --artist")
(defpoll current_status :interval "1s"  "~/.config/eww/scripts/music_info --time")
(defpoll song_status :interval "2s"  "~/.config/eww/scripts/music_info --status")
(defpoll cover_art :interval "2s"  "~/.config/eww/scripts/music_info --cover")

(defwidget music [] 
  (eventbox :onhover "${EWW_CMD} update music_reveal=true"
			  :onhoverlost "${EWW_CMD} update music_reveal=false"
		(box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :class "song_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
			(button :class "song" :onclick "~/.config/eww/scripts/pop music" song)
	    (revealer :transition "slideright"
			      :reveal music_reveal
			      :duration "350ms"
          (box :vexpand "false" :hexpand "false" :orientation "h" 
                    (button :class "song_btn_prev" :onclick "~/.config/eww/scripts/music_info --prev" "")
					(button :class "song_btn_play" :onclick "~/.config/eww/scripts/music_info --toggle" song_status)
					(button :class "song_btn_next" :onclick "~/.config/eww/scripts/music_info --next" ""))))))


